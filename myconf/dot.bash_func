#!/usr/bin/env bash
#
# Copyright (C) 2018 Julian Qian
#
# @file      dot.bash_func
# @author    Julian Qian <junist@gmail.com>
# @created   2018-08-20 21:31:27
#

# timestamp to date string
# e.g.: ts2ds 1414290121 "+%Y-%m-%d %H:%M:%S"
function ts2ds()
{
    if [[ -n $2 ]]; then
        fmt=$2
    else
        fmt="+%F"
    fi
    date -d "1970-01-01 utc $1 seconds" $fmt
}

# date string to timestamp
function ds2ts()
{
    date -d "$1" +%s
}

# print date string one-by-one from one day to another day
# e.g.: print_ds 20130103 20130604 +%Y%m%d
function print_ds()
{
    if [[ -n $1 ]]; then
        ds1=today
    else
        ds1=$1
    fi
    if [[ -n $2 ]]; then
        ds2=today
    else
        ds2=$2
    fi
    if [[ -n $3 ]]; then
        fmt=$3
    else
        fmt="+%Y%m%d"
    fi
    ts1=$(ds2ts $1)
    ts2=$(ds2ts $2)
    if [[ $ts1 -gt $ts2 ]]; then
        ((periods=($ts1-$ts2)/86400))
        incr=0
    else
        ((periods=($ts2-$ts1)/86400))
        incr=1
    fi
    for((i=0;i<=periods;i++));
    do
        if [[ $incr -eq 1 ]]; then
            ((ts=$ts1+86400*$i))
        else
            ((ts=$ts1-86400*$i))
        fi
        echo $(ts2ds $ts $fmt)
    done
}

function settitle()
{
  echo -ne "\e]2;$@\a\e]1;$@\a";
}

# This function defines a 'cd' replacement function capable of keeping,
# displaying and accessing history of visited directories, up to 10 entries.
# To use it, uncomment it, source this file and try 'cd --'.
# acd_func 1.0.5, 10-nov-2004
# Petar Marinov, http:/geocities.com/h2428, this is public domain

function cd_func()
{
  local x2 the_new_dir adir index
  local -i cnt

  if [[ $1 ==  "--" ]]; then
    dirs -v
    return 0
  fi

  the_new_dir=$1
  [[ -z $1 ]] && the_new_dir=$HOME

  if [[ ${the_new_dir:0:1} == '-' ]]; then
    #
    # Extract dir N from dirs
    index=${the_new_dir:1}
    [[ -z $index ]] && index=1
    adir=$(dirs +$index)
    [[ -z $adir ]] && return 1
    the_new_dir=$adir
  fi

  #
  # '~' has to be substituted by ${HOME}
  [[ ${the_new_dir:0:1} == '~' ]] && the_new_dir="${HOME}${the_new_dir:1}"

  #
  # Now change to the new dir and add to the top of the stack
  pushd "${the_new_dir}" > /dev/null
  [[ $? -ne 0 ]] && return 1
  the_new_dir=$(pwd)

  #
  # Trim down everything beyond 11th entry
  popd -n +11 2>/dev/null 1>/dev/null

  #
  # Remove any other occurence of this dir, skipping the top of the stack
  for ((cnt=1; cnt <= 10; cnt++)); do
    x2=$(dirs +${cnt} 2>/dev/null)
    [[ $? -ne 0 ]] && return 0
    [[ ${x2:0:1} == '~' ]] && x2="${HOME}${x2:1}"
    if [[ "${x2}" == "${the_new_dir}" ]]; then
      popd -n +$cnt 2>/dev/null 1>/dev/null
      cnt=cnt-1
    fi
  done

  return 0
}
alias cd=cd_func

function colors() {
	local fgc bgc vals seq0

	printf "Color escapes are %s\n" '\e[${value};...;${value}m'
	printf "Values 30..37 are \e[33mforeground colors\e[m\n"
	printf "Values 40..47 are \e[43mbackground colors\e[m\n"
	printf "Value  1 gives a  \e[1mbold-faced look\e[m\n\n"

	# foreground colors
	for fgc in {30..37}; do
		# background colors
		for bgc in {40..47}; do
			fgc=${fgc#37} # white
			bgc=${bgc#40} # black

			vals="${fgc:+$fgc;}${bgc}"
			vals=${vals%%;}

			seq0="${vals:+\e[${vals}m}"
			printf "  %-9s" "${seq0:-(default)}"
			printf " ${seq0}TEXT\e[m"
			printf " \e[${vals:+${vals+$vals;}}1mBOLD\e[m"
		done
		echo; echo
	done
}
